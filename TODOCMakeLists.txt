
##
#
# Welcome to the cmake lists file, this controls how nekohook will build for your system
#
##

cmake_minimum_required (VERSION 2.6)
project (libnekohook)


##
# User options
##

set(CGAME tf2 CACHE STRING "Game to build with")
#set(CARCH 32 CACHE STRING "Prefered arch to build for") # TODO, setup dynamic
set(CUSERNAME UNREGISTERED CACHE STRING "Register a username")
set(CUSERID 0 CACHE STRING "Register a id")
set(CMAKE_BUILD_TYPE RELEASE CACHE STRING "Obvious")

##
# Cmake includes
##

include(utils/cmake/ucm/cmake/ucm.cmake)

##
# Functions
##

# Easy log
Function(Log in_string arg2)
  if(arg2 STREQUAL "")
    set(arg2 "STATUS")
  endif()
  if(arg2 STREQUAL DEBUG)
    if (CMAKE_BUILD_TYPE STREQUAL "DEBUG")
      Message(STATUS ${in_string})
    endif()
  else()
    Message(STATUS ${in_string})
  endif()
endfunction()

Macro(add_impl)
  foreach(i IN LISTS ${ARGN})
    # Check if is a base
    if(NOT "BASE_${i}" STREQUAL "")
      add_impl(${BASE_${i}})
      add_definitions("-DNEKO${i}_=1")
    # If it isnt a module, we treat it like a directory to add
    else()
      ucm_add_dirs("src/modules/${i}" TO sources RECURSIVE)
    endif()
  endforeach()
endmacro()

# A function to easily add a module, for second arg, if you depend on a base, put that in
Macro(AddModule)
  # Do args
  cmake_parse_arguments(arg "" "name" "with" ${ARGN})
  if(arg_name STREQUAL "")
    message(FATAL_ERROR "Missing first name argument")
  elseif(arg_with STREQUAL "")
    set(arg_with "${arg_name}")
    Log("Missing second file dir argument for ${arg_name}, assuming!" DEBUG)
  endif()
  # do module stuff
  if(CGAME STREQUAL arg_name)
    add_impl(arg_with)
    string(TOUPPER name tmp)
    add_definitions("-DNEKO${tmp}_=1")
  endif()
  #cleanup
  list(REMOVE_DUPLICATES sources)
endmacro()

Macro(AddBase)
  # Do args
  cmake_parse_arguments(arg "" "name" "with" ${ARGN})
  if(arg_name STREQUAL "")
    message(FATAL_ERROR "Missing first name argument")
  elseif(arg_with STREQUAL "")
    set(file_dir "${name}")
    Log("Missing second file dir argument for ${name}, assuming!" DEBUG)
  endif()
  # Here we want to save our stuff so that when the module called wants to load, we can let it load our deps
  string(TOUPPER name tmp)
  set(BASE_${tmp} "${arg_with}")
endmacro()

# Add nekohooks source files except the modules, we add those selectivly
ucm_add_dirs("src" TO sources RECURSIVE)
ucm_remove_directories("src/modules" FROM sources)

# We like the cpp 17 standard, it makes everything so pretty ^_^
set(CMAKE_CXX_STANDARD 17)
if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC") # microsoft gay
  #todo?
else()
  ucm_add_flags(-g3 -ggdb -Wall CONFIG Debug)
  ucm_add_flags(-mtune=generic -O3 CONFIG Release)
endif()

# Bases
AddBase(source2013)
AddBase(gl_draw)
AddBase(xlib)

#modules
AddModule(tf2 source2013 gl_draw)
AddModule(fof source2013 gl_draw)
AddModule(csgo "csgo" gl_draw)

# Set git hash and date if possible
find_package(Git)
if(GIT_FOUND)
	execute_process(
	  COMMAND git log -1 --pretty="%h"
	  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	  OUTPUT_VARIABLE GIT_COMMIT_HASH
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	add_definitions("-DGIT_COMMIT_HASH=${GIT_COMMIT_HASH}")
	execute_process(
	  COMMAND git log -1 --pretty="%ai"
	  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	  OUTPUT_VARIABLE GIT_COMMIT_DATE
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	add_definitions("-DGIT_COMMIT_DATE=${GIT_COMMIT_DATE}")
endif()


# Default compiler flags
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Flags: ${CMAKE_CXX_FLAGS_RELEASE}")

#include_directories(${INCLUDE_DIRS})
add_library(nekohook SHARED ${source_files})

target_link_libraries(nekohook c stdc++)
